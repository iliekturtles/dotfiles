[helpers]
concat = "dotter/helpers/concat.rhai"

[aconfmgr.files]
"aconfmgr/10-arch.sh" = "$XDG_CONFIG_HOME/aconfmgr/10-arch.sh"
"aconfmgr/files/boot/loader/entries/arch-fallback.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/entries/arch-fallback.conf", if = "dotter.packages.linux" }
"aconfmgr/files/boot/loader/entries/arch-lts-fallback.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/entries/arch-lts-fallback.conf", if = "linux.lts" }
"aconfmgr/files/boot/loader/entries/arch-lts.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/entries/arch-lts.conf", if = "linux.lts" }
"aconfmgr/files/boot/loader/entries/arch-surface-fallback.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/entries/arch-surface-fallback.conf", if = "linux.surface" }
"aconfmgr/files/boot/loader/entries/arch-surface.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/entries/arch-surface.conf", if = "linux.surface" }
"aconfmgr/files/boot/loader/entries/arch.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/entries/arch.conf", if = "dotter.packages.linux" }
"aconfmgr/files/boot/loader/loader.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/boot/loader/loader.conf", if = "dotter.packages.linux" }
"aconfmgr/files/etc/hostname" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/hostname" }
"aconfmgr/files/etc/bluetooth/input.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/bluetooth/input.conf", if = "linux.bluetooth" }
"aconfmgr/files/etc/bluetooth/main.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/bluetooth/main.conf", if = "linux.bluetooth" }
"aconfmgr/files/etc/bluetooth/network.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/bluetooth/network.conf", if = "linux.bluetooth" }
"aconfmgr/files/etc/locale.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/locale.conf" }
"aconfmgr/files/etc/locale.gen" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/locale.gen" }
"aconfmgr/files/etc/mkinitcpio.d/linux-lts.preset" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/mkinitcpio.d/linux-lts.preset", if = "linux.lts" }
"aconfmgr/files/etc/mkinitcpio.d/linux-surface.preset" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/mkinitcpio.d/linux-surface.preset", if = "linux.surface" }
"aconfmgr/files/etc/mkinitcpio.d/linux.preset" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/mkinitcpio.d/linux.preset", if = "dotter.packages.linux" }
"aconfmgr/files/etc/pacman.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/pacman.conf", if = "dotter.packages.pacman" }
"aconfmgr/files/etc/paru.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/paru.conf", if = "dotter.packages.paru" }
"aconfmgr/files/etc/ssh/sshd_config" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/ssh/sshd_config", if = "dotter.packages.sshd" }
"aconfmgr/files/etc/sudoers" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/sudoers" }
"aconfmgr/files/etc/systemd/network/10-ethernet.network" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/systemd/network/10-ethernet.network", if = "systemd-networkd.ethernet" }
"aconfmgr/files/etc/systemd/network/20-wlan.network" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/systemd/network/20-wlan.network", if = "systemd-networkd.wlan" }
"aconfmgr/files/etc/systemd/network/30-wwan.network" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/systemd/network/30-wwan.network", if = "systemd-networkd.wwan" }
"aconfmgr/files/etc/udev/hwdb.d/10-keyboard.hwdb" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/udev/hwdb.d/10-keyboard.hwdb", if = "dotter.packages.linux" }
"aconfmgr/files/etc/udev/rules.d/99-disable-surface-touch.rules" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/udev/rules.d/99-disable-surface-touch.rules", if = "linux.surface" }
"aconfmgr/files/etc/wsl.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/wsl.conf", if = "dotter.packages.wsl" }
"aconfmgr/files/etc/xdg/reflector/reflector.conf" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/etc/xdg/reflector/reflector.conf" }
"aconfmgr/files/usr/lib/systemd/system/systemd-networkd-wait-online.service" = { type = "template", target = "$XDG_CONFIG_HOME/aconfmgr/files/usr/lib/systemd/system/systemd-networkd-wait-online.service", if = "dotter.packages.systemd-networkd" }

[amd]

[bash]
depends = ["shell"]

[bash.files]
"bash/bash_profile" = "~/.bash_profile"
"bash/bashrc" = "~/.bashrc"

[bash.variables.bash]
HISTCONTROL = "ignoreboth"
HISTFILE = "$XDG_DATA_HOME/bash_history"
HISTFILESIZE = "2000"
HISTSIZE = "1000"

[bat]

[fish]
depends = ["shell"]

[fish.files]
"fish/config.fish" = "$XDG_CONFIG_HOME/fish/config.fish"
"fish/fish_variables" = "$XDG_CONFIG_HOME/fish/fish_variables"
"fish/interactive.fish" = "$XDG_CONFIG_HOME/fish/interactive.fish"
"fish/login.fish" = "$XDG_CONFIG_HOME/fish/login.fish"
"fish/functions/dot.fish" = { type = "symbolic", target = "$XDG_CONFIG_HOME/fish/functions/dot.fish", if = "dotter.packages.git" }
"fish/functions/hx.fish" = { type = "symbolic", target = "$XDG_CONFIG_HOME/fish/functions/hx.fish", if = "dotter.packages.helix" }
"fish/functions/la.fish" = "$XDG_CONFIG_HOME/fish/functions/la.fish"
"fish/functions/ll.fish" = "$XDG_CONFIG_HOME/fish/functions/ll.fish"
"fish/functions/pacdiff.fish" = { type = "symbolic", target = "$XDG_CONFIG_HOME/fish/functions/pacdiff.fish", if = "(and dotter.packages.neovim dotter.packages.pacman)" }
"fish/functions/sshmux.fish" = { type = "symbolic", target = "$XDG_CONFIG_HOME/fish/functions/sshmux.fish", if = "dotter.packages.ssh" }
"fish/functions/vi.fish" = { type = "symbolic", target = "$XDG_CONFIG_HOME/fish/functions/vi.fish", if = "dotter.packages.neovim" }
"fish/functions/yeet.fish" = { type = "template", target = "$XDG_CONFIG_HOME/fish/functions/yeet.fish", if = "dotter.packages.pacman" }
"fish/functions/yolo.fish" = { type = "template", target = "$XDG_CONFIG_HOME/fish/functions/yolo.fish", if = "dotter.packages.pacman" }

[git.files]
"git/config" = "$XDG_CONFIG_HOME/git/config"
"git/ignore" = "$XDG_CONFIG_HOME/git/ignore"

[git.variables.git.core]
autocrlf = "input"

[git.variables.git.credential]
helper = "/usr/lib/git-core/git-credential-libsecret"

[git.variables.git.diff]
tool = "nvimdiff"

[git.variables.git.http]
sslbackend = ""

[git.variables.git.merge]
guitool = ""
tool = "nvimdiff"

[git.variables.git.safe]
directory = []

[helix.files]
"helix/config.toml" = "$XDG_CONFIG_HOME/helix/config.toml"
"helix/languages.toml" = "$XDG_CONFIG_HOME/helix/languages.toml"

[htop.files]
"htop/htoprc" = "$XDG_CONFIG_HOME/htop/htoprc"

[intel]

[linux.variables.linux]
bluetooth = false
default-kernel = "arch"
fstrim = true
lts = false
surface = false

[msys2.files]
"msys2/etc/nsswitch.conf" = "C:/msys2/etc/nsswitch.conf"

[neovim.files]
"neovim/init.vim" = "$XDG_CONFIG_HOME/nvim/init.vim"
"neovim/mappings.vim" = "$XDG_CONFIG_HOME/nvim/mappings.vim"
"neovim/plugins.vim" = "$XDG_CONFIG_HOME/nvim/plugins.vim"
"neovim/settings.vim" = "$XDG_CONFIG_HOME/nvim/settings.vim"
"neovim/statusline.vim" = "$XDG_CONFIG_HOME/nvim/statusline.vim"
"neovim/ui.vim" = "$XDG_CONFIG_HOME/nvim/ui.vim"

[neovim-qt]
depends = ["neovim"]

[pacman.variables]
pacman = "pacman"

[paru]
depends = ["pacman"]

[paru.variables]
paru = "paru"

[ripgrep]

[shell.files]
"shell/dotupdate" = "~/.local/bin/dotupdate"

[shell.variables.shell]
EDITOR = "nvim"
Encoding = "UTF-8"
LESS = "-iFR -x4 --incsearch --mouse --wheel-lines=4"
Locale = "en_US"
LocalTimeZone = "US/Eastern"
PATH_PREFIX = ["$HOME/.local/bin"]
PATH_SUFFIX = []
SOURCE_HOME = "~/Source"
XDG_CACHE_HOME = "$HOME/.cache"
XDG_CONFIG_HOME = "$HOME/.config"
XDG_DATA_HOME = "$HOME/.local/share"
XDG_STATE_HOME = "$HOME/.local/state"

[ssh.files]
"ssh/config" = "~/.ssh/config"

[ssh.variables.ssh]
connection-sharing = true

[sshd]
depends = ["ssh"]

[starship.files]
"starship/starship.toml" = "$XDG_CONFIG_HOME/starship.toml"

[starship.variables.starship]
command_timeout = 2000

[systemd]
depends = ["shell"]

[systemd.files]
"systemd/environment.d/envvars.conf" = "$XDG_CONFIG_HOME/environment.d/envvars.conf"

[systemd-networkd]
depends=["systemd"]

[systemd-networkd.variables.systemd-networkd]
ethernet = true
wlan = false
wwan = false

[tig]

[tmux.files]
"tmux/tmux.conf" = "$XDG_CONFIG_HOME/tmux/tmux.conf"

[tmux.variables.tmux]
default-terminal = ""

[windows]
depends = ["shell"]

[wsl]

[wsl-client]
